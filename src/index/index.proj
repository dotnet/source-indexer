<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" InitialTargets="EnsurePreconditions" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="WhatIf">
  <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\dir.props" />
  <PropertyGroup>
    <WhatIf Condition="'$(WhatIf)' != 'true'">false</WhatIf>
  </PropertyGroup>
  <Import Project="$(MSBuildThisFileDirectory)repositories.props" />

  <ItemGroup>
    <OverwriteFiles Include="$(MSBuildThisFileDirectory)/overwrite/**/*"/>
  </ItemGroup>

  <ItemDefinitionGroup>
    <Repository>
      <Branch>master</Branch>
      <LocalPath>$(RepositoryPath)%(Identity)/</LocalPath>
      <ServerPath>%(Url)/tree/%(Branch)/</ServerPath>
    </Repository>
  </ItemDefinitionGroup>

  <Target Name="EnsurePreconditions">
    <Error Condition="'$(OS)' != 'Windows_NT'" Text="This tool can only be run on Windows_NT."/>
  </Target>

  <Target Name="Clean">
    <RemoveDir Directories="$(OutDir)"/>
  </Target>

  <Target Name="PrepareOutput">
    <MakeDir Condition="!Exists('$(OutDir)')" Directories="$(OutDir)"/>
    <MakeDir Condition="!Exists('$(RepositoryPath)')" Directories="$(RepositoryPath)"/>
  </Target>

  <Target Name="Clone" DependsOnTargets="PrepareOutput" Outputs="%(Repository.Identity)">
    <PropertyGroup>
      <CloneCommand>git clone %(Repository.Url).git -b %(Branch) --single-branch</CloneCommand>
      <CloneCommand Condition="'%(Repository.OldCommit)' == '' and '%(Repository.DeepClone)' != 'true'">$(CloneCommand) --depth 1</CloneCommand>
      <CloneCommand>$(CloneCommand) %(Repository.LocalPath)</CloneCommand>

      <CheckoutCommand Condition="'%(Repository.OldCommit)' != ''">git -C %(Repository.LocalPath) checkout %(Repository.OldCommit)</CheckoutCommand>

      <CloneExists Condition="Exists('%(Repository.LocalPath)')">true</CloneExists>
    </PropertyGroup>
    <Exec Condition="'$(CloneExists)' != 'true'" Command="$(CloneCommand)" />
    <Exec Condition="'$(CloneExists)' != 'true' and  '$(CheckoutCommand)' != ''" Command="$(CheckoutCommand)" />
    <Exec Command="git rev-parse HEAD 2>&amp;1" WorkingDirectory="%(Repository.LocalPath)" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="CommitHash"/>
    </Exec>
    <ItemGroup>
      <ClonedRepository Include="@(Repository)">
        <ServerPath>%(Url)/tree/$(CommitHash)/</ServerPath>
      </ClonedRepository>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="SelectProjects" AssemblyFile="$(SourceIndexerTasksAssembly)"/>
  <Target Name="SelectProjects" DependsOnTargets="Clone" Outputs="@(SourceProject)">
    <SelectProjects Repositories="@(ClonedRepository)">
      <Output TaskParameter="SelectedProjects" ItemName="SourceProject"/>
    </SelectProjects>
  </Target>

  <Target Name="Validate" DependsOnTargets="SelectProjects">
    <Error Condition="!Exists('%(SourceProject.Identity)')" Text="Expected File '%(SourceProject.FullPath)' does not exist." Code="SB001"/>
  </Target>

  <Target Name="Prepare" DependsOnTargets="Validate" Outputs="%(ClonedRepository.Identity)">
    <PropertyGroup>
      <PrepareCommand>$([System.String]::Copy('%(ClonedRepository.PrepareCommand)').Trim())</PrepareCommand>
    </PropertyGroup>
    <Exec Command="cmd /c &quot;$(PrepareCommand)&quot;" WorkingDirectory="%(ClonedRepository.LocalPath)" ContinueOnError="true" IgnoreStandardErrorWarningFormat="true" LogStandardErrorAsError="false" IgnoreExitCode="true"/>
  </Target>

  <Target Name="BuildGenerator" Condition="!Exists('$(HtmlGeneratorExePath)')">
    <MSBuild Projects="$(SourcesDir)SourceBrowser/src/HtmlGenerator/HtmlGenerator.csproj" Targets="Restore;Build" Properties="SolutionDir=$(SourcesDir)SourceBrowser">
      <Output TaskParameter="TargetOutputs" PropertyName="HtmlGeneratorExePath"/>
    </MSBuild>
  </Target>

  <Target Name="Build" DependsOnTargets="BuildGenerator;Prepare">
    <Error Condition="!Exists('$(HtmlGeneratorExePath)')" Text="Html generator executable not found."/>
    <RemoveDuplicates Inputs="@(SourceProject)">
      <Output TaskParameter="Filtered" ItemName="_FilteredProject"/>
    </RemoveDuplicates>
    <RemoveDir Directories="$(OutDir)index/"/>
    <WriteLinesToFile Lines="@(_FilteredProject -> '%(FullPath)')" File="$(OutDir)index.list" Overwrite="true"/>
    <PropertyGroup>
      <SourceIndexCmd>$(HtmlGeneratorExePath)</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /nobuiltinfederations</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /out:$(OutDir)index/</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /in:$(OutDir)index.list</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd)@(ClonedRepository -> ' /serverPath:"%(LocalPath)=%(ServerPath)"', '')</SourceIndexCmd>
      <SourceIndexCmd>$(SourceIndexCmd) /p:TargetGroup=netcoreapp</SourceIndexCmd>
    </PropertyGroup>
    <Exec Command="$(SourceIndexCmd)" LogStandardErrorAsError="false"/>
    <Copy SourceFiles="@(OverwriteFiles)" DestinationFiles="@(OverwriteFiles -> '$(OutDir)index/%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build"/>
</Project>
