schedules:
- cron: 0 10 * * *
  displayName: Every day at 10:00 UTC
  branches:
    include:
    - master
  always: true


jobs:
- job: BuildIndex
  displayName: Build Source Index

  pool:
    name: NetCoreInternal-Pool
    queue: BuildPool.Windows.10.Amd64.VS2019

  timeoutInMinutes: 960

  steps:
  - checkout: self
    clean: true
    submodules: true

  - task: DeleteFiles@1
    displayName: Delete files from bin
    inputs:
      SourceFolder: bin
      Contents: '**/*'

  - task: UseDotNet@2
    displayName: Use .Net Core sdk 3.1.201
    inputs:
      version: 3.1.201

  - task: UseDotNet@2
    displayName: Use .Net Core sdk 2.1.805
    inputs:
      version: 2.1.805

  - script: |
      dotnet tool restore
      dotnet script deployment/AllowPrereleaseSdks.csx
    displayName: Check Allow Prerelease Sdks

  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: restore
      projects: |
        **\*.sln

  - task: VSBuild@1
    displayName: Clone All Repositories
    inputs:
      solution: build.proj
      msbuildArgs: /t:Clone
      msbuildArchitecture: x64

  - powershell: |
     Stop-Process -Name "dotnet"
     $installScript = Join-Path $env:TEMP dotnet-install.ps1
     [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
     Invoke-WebRequest https://dot.net/v1/dotnet-install.ps1 -UseBasicParsing -OutFile $installScript

     $installDir = "$(Agent.ToolsDirectory)/dotnet"

     ls -Recurse -Include global.json | %{
       $v = $_ | Get-Content -Raw | ConvertFrom-Json | %{ if ($_.tools.dotnet) {$_.tools.dotnet} else {$_.sdk.version} }
       $isSensibleVersion = $v.Split('.')[0] -as [int] -le 30
       Write-Host "Installing .NET CLI version $v from $_"
       try
       {
         & $installScript -Version $v -InstallDir $installDir -NoPath
       }
       catch
       {
         Write-Host "Unable to install Version $v"
         if ($isSensibleVersion) throw
       }
      }
    displayName: 'Install Required Versions of .NET Core'

  - task: VSBuild@1
    displayName: Build source index
    inputs:
      solution: build.proj
      msbuildArgs: /t:Build
      msbuildArchitecture: x64

  - powershell: |
      deployment/install-tool.ps1 -Name 'azure-cli' -Version 2.8.0 -TestPath '/wbin/az.cmd' -BinPath '/wbin/'
    displayName: 'Install Az CLI 2.8.0'

  - powershell: |
      deployment/install-tool.ps1 -Name 'azcopy' -Version 10.2.1
    displayName: 'Install AzCopy 10.2.1'

  - task: CopyFiles@2
    inputs:
      sourceFolder: bin/index/
      contents: |
        **
        !index/**
      targetFolder: bin/index-stage/
      cleanTargetFolder: true

  - powershell: deployment/normalize-case.ps1 -Root bin/index/index/
    displayName: Normalize Case Of Index Files

  - task: AzureCLI@2
    displayName: Upload Index to Azure Storage
    inputs:
      azureSubscription: DncEng-VSTS
      scriptLocation: inlineScript
      scriptType: ps
      inlineScript: >
        deployment/upload-index-to-container.ps1
        -StorageAccountName netsourceindex
        -IndexSource bin/index/index/
        -OutFile bin/index.url

  - task: AzureRmWebAppDeployment@4
    displayName: 'Azure App Service Deploy: netsourceindex'
    inputs:
      ConnectionType: AzureRM
      azureSubscription: DncEng-VSTS
      appType: webApp
      WebAppName: netsourceindex
      ResourceGroupName: source.dot.net
      deployToSlotOrASE: true
      SlotName: staging
      packageForLinux: bin/index-stage/
      enableCustomDeployment: true
      DeploymentType: webDeploy
      RemoveAdditionalFilesFlag: true

  - task: AzureCLI@2
    displayName: Deploy Storage Proxy Url to WebApp
    inputs:
      azureSubscription: DncEng-VSTS
      scriptLocation: inlineScript
      scriptType: ps
      inlineScript: >
        deployment/deploy-storage-proxy.ps1
        -ProxyUrlFile bin/index.url
        -ResourceGroup source.dot.net
        -WebappName netsourceindex
        -Slot staging

  - task: AzureCLI@2
    displayName: Restart WebApp
    inputs:
      azureSubscription: DncEng-VSTS
      scriptLocation: inlineScript
      scriptType: ps
      inlineScript: >
        az webapp restart --name netsourceindex --slot staging --resource-group source.dot.net

  - powershell: |
      Start-Sleep 60
      $statusCode = Invoke-WebRequest https://netsourceindex-staging.azurewebsites.net -UseBasicParsing | select -ExpandProperty StatusCode
      if ($statusCode -ne 200) {
        Write-Host "##vso[task.logissue type=error;]Deployed website returned undexpected status code $statusCode"
      }
    displayName: Test Deployed WebApp

  - task: AzureCLI@2
    displayName: Swap Staging Slot into Production
    inputs:
      azureSubscription: DncEng-VSTS
      scriptLocation: inlineScript
      scriptType: ps
      inlineScript:  >
        az webapp deployment slot swap
        --resource-group source.dot.net
        --name netsourceindex
        --slot staging
        --target-slot production

  - task: AzureCLI@2
    displayName: Cleanup Old Storage Containers
    inputs:
      azureSubscription: DncEng-VSTS
      scriptLocation: inlineScript
      scriptType: ps
      inlineScript:  >
        deployment/cleanup-old-containers.ps1
        -ResourceGroup source.dot.net
        -WebappName netsourceindex
        -StorageAccountName netsourceindex

  - publish: bin/repo
    artifact: repo-logs
