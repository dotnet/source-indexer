schedules:
- cron: 0 10 * * *
  displayName: Every day at 10:00 UTC
  branches:
    include:
    - main
  always: true

resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: NetCore1ESPool-Internal-XL
      image: 1es-windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: stage
      jobs:
      - job: BuildIndex
        displayName: Build Source Index
        timeoutInMinutes: 360

        variables:
        - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
          - name: isOfficialBuild
            value: true
          - name: deploymentSlot
            value: staging
          - name: storageAccount
            value: netsourceindex
        - ${{ else }}:
          - name: isOfficialBuild
            value: false
          - name: deploymentSlot
            value: validation
          - name: storageAccount
            value: netsourceindexvalidation
        - group: source-dot-net stage1 variables

        templateContext:
          outputs:
          - output: nuget
            displayName: 'NuGet push'
            packageParentPath: '$(Build.ArtifactStagingDirectory)'
            packagesToPush: '$(Build.ArtifactStagingDirectory)/packages/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: '9ee6d478-d288-47f7-aacc-f6e6d082ae6d/d1622942-d16f-48e5-bc83-96f4539e7601'
          - output: pipelineArtifact
            condition: always()
            targetPath: $(Build.ArtifactStagingDirectory)/logs
            artifactName: logs

        steps:
        - checkout: self
          clean: true
          submodules: true

        - task: DeleteFiles@1
          displayName: Delete files from bin
          inputs:
            SourceFolder: bin
            Contents: '**/*'

        - task: UseDotNet@2
          displayName: Install .NET Sdk
          inputs:
            useGlobalJson: true

        - task: DotNetCoreCLI@2
          displayName: dotnet restore
          inputs:
            command: custom
            custom: restore
            projects: |
              **\*.sln

        - task: DotNetCoreCLI@2
          displayName: dotnet build
          inputs:
            command: 'build'
            projects: |
              src\source-indexer.sln
              src\SourceBrowser\SourceBrowser.sln
            arguments: '/p:PackageOutputPath=$(Build.ArtifactStagingDirectory)/packages'

        - task: AzureCLI@2
          displayName: Log in to Azure and clone data
          inputs:
            azureSubscription: 'SourceDotNet Stage1 Publish'
            addSpnToEnvironment: true
            scriptType: 'ps'
            scriptLocation: 'inlineScript'
            inlineScript: |
              dotnet build build.proj /t:Clone /v:n /bl:$(Build.ArtifactStagingDirectory)/logs/clone.binlog /p:Stage1StorageAccount=netsourceindexstage1 /p:Stage1StorageContainer=stage1

        - task: DotNetCoreCLI@2
          displayName: Prepare All Repositories
          inputs:
            command: 'build'
            projects: 'build.proj'
            arguments: '/t:Prepare /v:n /bl:$(Build.ArtifactStagingDirectory)/logs/prepare.binlog'

        - task: DotNetCoreCLI@2
          displayName: Build source index
          inputs:
            command: 'build'
            projects: 'build.proj'
            arguments: '/t:BuildIndex /v:n /bl:$(Build.ArtifactStagingDirectory)/logs/build.binlog'

        - task: CopyFiles@2
          inputs:
            sourceFolder: bin/index/
            contents: |
              **
              !index/**
            targetFolder: bin/index-stage/
            cleanTargetFolder: true

        - powershell: deployment/normalize-case.ps1 -Root bin/index/index/
          displayName: Normalize Case Of Index Files

        - task: AzureCLI@2
          displayName: Create new storage container
          inputs:
            azureSubscription: SourceDotNet-Deployment-ARM
            scriptLocation: inlineScript
            scriptType: ps
            inlineScript: >
              deployment/upload-index-to-container.ps1
              -StorageAccountName $(storageAccount)
              -OutFile bin/index.url

        - task: AzureFileCopy@6
          displayName: Upload index to Azure Stroage
          inputs:
            azureSubscription: SourceDotNet-Deployment-ARM
            SourcePath: "bin/index/index/*"
            Destination: AzureBlob
            storage: $(storageAccount)
            ContainerName: $(NEW_CONTAINER_NAME)

        - task: AzureRmWebAppDeployment@4
          displayName: 'Azure App Service Deploy: netsourceindex'
          inputs:
            ConnectionType: AzureRM
            azureSubscription: SourceDotNet-Deployment-ARM
            appType: webApp
            WebAppName: netsourceindex
            ResourceGroupName: source.dot.net
            deployToSlotOrASE: true
            SlotName: $(deploymentSlot)
            packageForLinux: bin/index-stage/
            enableCustomDeployment: true
            DeploymentType: zipDeploy
            RemoveAdditionalFilesFlag: true

        - task: AzureCLI@2
          displayName: Deploy Storage Proxy Url to WebApp
          inputs:
            azureSubscription: SourceDotNet-Deployment-ARM
            scriptLocation: inlineScript
            scriptType: ps
            inlineScript: >
              deployment/deploy-storage-proxy.ps1
              -ProxyUrlFile bin/index.url
              -ResourceGroup source.dot.net
              -WebappName netsourceindex
              -Slot $(deploymentSlot)

        - task: AzureCLI@2
          displayName: Restart WebApp
          inputs:
            azureSubscription: SourceDotNet-Deployment-ARM
            scriptLocation: inlineScript
            scriptType: ps
            inlineScript: |
              az webapp restart --name netsourceindex --slot $(deploymentSlot) --resource-group source.dot.net

        - pwsh: |
            Start-Sleep 60
            $urls = @(
              "https://netsourceindex-$(deploymentSlot).azurewebsites.net",
              "https://netsourceindex-$(deploymentSlot).azurewebsites.net/System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/String.cs.html"
            )
            foreach ($url in $urls) {
              $statusCode = Invoke-WebRequest $url -UseBasicParsing -SkipHttpErrorCheck | select -ExpandProperty StatusCode
              if ($statusCode -ne 200) {
                Write-Host "##vso[task.logissue type=error;]Deployed website returned undexpected status code $statusCode from url $url"
                Write-Host "##vso[task.complete result=Failed;]Deployed website returned undexpected status code $statusCode from url $url"
              }
            }
          displayName: Test Deployed WebApp

        - ${{ if eq(variables.isOfficialBuild, true) }}:
          - task: AzureCLI@2
            displayName: Swap Staging Slot into Production
            inputs:
              azureSubscription: SourceDotNet-Deployment-ARM
              scriptLocation: inlineScript
              scriptType: ps
              inlineScript: >
                az webapp deployment slot swap
                --resource-group source.dot.net
                --name netsourceindex
                --slot staging
                --target-slot production

          - task: AzureCLI@2
            displayName: Cleanup Old Storage Containers
            inputs:
              azureSubscription: SourceDotNet-Deployment-ARM
              scriptLocation: inlineScript
              scriptType: ps
              inlineScript: >
                deployment/cleanup-old-containers.ps1
                -ResourceGroup source.dot.net
                -WebappName netsourceindex
                -StorageAccountName $(storageAccount)
